<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.todolistt&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.todolistt&quot;&#10;        minSdk = 27&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose.jvmstubs)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.todolistt&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.todolistt&quot;&#10;        minSdk = 27&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose.jvmstubs)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Navigation/MainScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Navigation/MainScreen.kt" />
              <option name="originalContent" value="package com.example.todolist.navigation&#10;&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.todolist.pages.*&#10;import com.example.todolistt.Pages.HomeScreen&#10;import com.example.todolistt.Pages.StatsScreen&#10;import com.example.todolistt.Pages.ProfileScreen&#10;&#10;@Composable&#10;fun MainScreen() {&#10;    val navController = rememberNavController()&#10;&#10;    Scaffold(&#10;        bottomBar = { BottomNavBar(navController = navController) }&#10;    ) { padding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = BottomNavItem.Home.route,&#10;            modifier = Modifier.padding(padding)&#10;        ) {&#10;            composable(BottomNavItem.Home.route) {&#10;                HomeScreen(navController)&#10;            }&#10;            composable(BottomNavItem.Stats.route) {&#10;                StatsScreen()&#10;            }&#10;            composable(BottomNavItem.Profile.route) {&#10;                ProfileScreen(&#10;                    userName = &quot;Your Name&quot;,          // Pass your user state here&#10;                    onUserNameChange = {},           // Provide callback&#10;                    onClearData = {}                 // Provide callback&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavBar(navController: NavHostController) {&#10;    // Basic implementation for a 3-item bottom navigation bar&#10;    NavigationBar {&#10;        val items = listOf(BottomNavItem.Home, BottomNavItem.Stats, BottomNavItem.Profile)&#10;        val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;        items.forEach { item -&gt;&#10;            NavigationBarItem(&#10;                icon = { Icon(item.icon, contentDescription = item.label) },&#10;                label = { Text(item.label) },&#10;                selected = currentRoute == item.route,&#10;                onClick = {&#10;                    if (currentRoute != item.route) {&#10;                        navController.navigate(item.route) {&#10;                            popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                            launchSingleTop = true&#10;                            restoreState = true&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.todolist.navigation&#10;&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.todolistt.Pages.HomeScreen&#10;import com.example.todolistt.Pages.StatsScreen&#10;import com.example.todolistt.Pages.ProfileScreen&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;&#10;@Composable&#10;fun MainScreen() {&#10;    val navController = rememberNavController()&#10;&#10;    Scaffold(&#10;        bottomBar = { BottomNavBar(navController = navController) }&#10;    ) { padding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = BottomNavItem.Home.route,&#10;            modifier = Modifier.padding(padding)&#10;        ) {&#10;            composable(BottomNavItem.Home.route) {&#10;                HomeScreen(navController)&#10;            }&#10;            composable(BottomNavItem.Stats.route) {&#10;                StatsScreen()&#10;            }&#10;            composable(BottomNavItem.Profile.route) {&#10;                ProfileScreen(&#10;                    userName = &quot;Your Name&quot;,          // Pass your user state here&#10;                    onUserNameChange = {},           // Provide callback&#10;                    onClearData = {}                 // Provide callback&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavBar(navController: NavHostController) {&#10;    // Basic implementation for a 3-item bottom navigation bar&#10;    NavigationBar {&#10;        val items = listOf(BottomNavItem.Home, BottomNavItem.Stats, BottomNavItem.Profile)&#10;        val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;        items.forEach { item -&gt;&#10;            NavigationBarItem(&#10;                icon = { Icon(item.icon, contentDescription = item.label) },&#10;                label = { Text(item.label) },&#10;                selected = currentRoute == item.route,&#10;                onClick = {&#10;                    if (currentRoute != item.route) {&#10;                        navController.navigate(item.route) {&#10;                            popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                            launchSingleTop = true&#10;                            restoreState = true&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Navigation/NaviGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Navigation/NaviGraph.kt" />
              <option name="originalContent" value="package com.example.todolistt.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.todolistt.Pages.CreateTodoScreen&#10;import com.example.todolistt.Pages.LoginScreen&#10;import com.example.todolistt.Pages.SignupScreen&#10;import com.example.todolistt.Pages.WelcomeScreen&#10;import com.example.todolistt.pages.EditTodoScreen&#10;import com.example.todolistt.pages.SplashScreen&#10;&#10;@Composable&#10;fun TodoAppNavigation(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;splash&quot;&#10;    ) {&#10;        composable(&quot;splash&quot;) {&#10;            SplashScreen(navController)&#10;        }&#10;        composable(&quot;welcome&quot;) {&#10;            WelcomeScreen(navController)&#10;        }&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(navController)&#10;        }&#10;        composable(&quot;signup&quot;) {&#10;            SignupScreen(navController)&#10;        }&#10;        composable(&quot;main&quot;) {&#10;            // MainScreen()  // Bottom nav with Home, Stats, Profile&#10;        }&#10;        composable(&quot;createTodo&quot;) {&#10;            CreateTodoScreen(navController)  // Screen to create a new todo item&#10;        }&#10;        composable(&quot;editTodo/{todoId}&quot;) { backStackEntry -&gt;&#10;            val todoId = backStackEntry.arguments?.getString(&quot;todoId&quot;)&#10;            EditTodoScreen(navController, todoId)&#10;        }&#10;    }&#10;}&#10;&#10;fun LoginScreen(navController: NavHostController) {&#10;&#10;}&#10;&#10;@Composable&#10;fun EditTodoScreen(navController: NavHostController, todoId: String?) {&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.todolistt.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.todolistt.Pages.CreateTodoScreen&#10;import com.example.todolistt.Pages.LoginScreen&#10;import com.example.todolistt.Pages.SignupScreen&#10;import com.example.todolistt.Pages.WelcomeScreen&#10;import com.example.todolistt.Pages.EditTodoScreen&#10;import com.example.todolistt.Pages.SplashScreen&#10;&#10;@Composable&#10;fun TodoAppNavigation(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;splash&quot;&#10;    ) {&#10;        composable(&quot;splash&quot;) {&#10;            SplashScreen(navController)&#10;        }&#10;        composable(&quot;welcome&quot;) {&#10;            WelcomeScreen(navController)&#10;        }&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(navController)&#10;        }&#10;        composable(&quot;signup&quot;) {&#10;            SignupScreen(navController)&#10;        }&#10;        composable(&quot;main&quot;) {&#10;            // MainScreen()  // Bottom nav with Home, Stats, Profile&#10;        }&#10;        composable(&quot;createTodo&quot;) {&#10;            CreateTodoScreen(navController)  // Screen to create a new todo item&#10;        }&#10;        composable(&quot;editTodo/{todoId}&quot;) { backStackEntry -&gt;&#10;            val todoId = backStackEntry.arguments?.getString(&quot;todoId&quot;)&#10;            EditTodoScreen(navController, todoId)&#10;        }&#10;    }&#10;}&#10;&#10;fun LoginScreen(navController: NavHostController) {&#10;&#10;}&#10;&#10;@Composable&#10;fun EditTodoScreen(navController: NavHostController, todoId: String?) {&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/CreateTodoScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/CreateTodoScreen.kt" />
              <option name="originalContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;&#10;// Declare DarkBlue only once here&#10;val DarkBlue = Color(0xFF0D47A1)&#10;&#10;@Composable&#10;fun CreateTodoScreen(navController: NavController) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;    var progress by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = Color.White&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.Top&#10;        ) {&#10;            Text(&#10;                text = &quot;Create New Task&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = DarkBlue&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = title,&#10;                onValueChange = { title = it },&#10;                label = { Text(&quot;Task Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = description,&#10;                onValueChange = { description = it },&#10;                label = { Text(&quot;Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = progress,&#10;                onValueChange = { if (it.all { c -&gt; c.isDigit() }) progress = it },&#10;                label = { Text(&quot;Progress (%)&quot;) },&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    // TODO: Save todo logic here using ViewModel or DB&#10;                    navController.popBackStack()&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(containerColor = DarkBlue)&#10;            ) {&#10;                Text(text = &quot;Save Task&quot;, color = Color.White)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;&#10;@Composable&#10;fun CreateTodoScreen(navController: NavController) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;    var progress by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = Color.White&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.Top&#10;        ) {&#10;            Text(&#10;                text = &quot;Create New Task&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = DarkBlue&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = title,&#10;                onValueChange = { title = it },&#10;                label = { Text(&quot;Task Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = description,&#10;                onValueChange = { description = it },&#10;                label = { Text(&quot;Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = progress,&#10;                onValueChange = { if (it.all { c -&gt; c.isDigit() }) progress = it },&#10;                label = { Text(&quot;Progress (%)&quot;) },&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    // TODO: Save todo logic here using ViewModel or DB&#10;                    navController.popBackStack()&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(containerColor = DarkBlue)&#10;            ) {&#10;                Text(text = &quot;Save Task&quot;, color = Color.White)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/EditTodoScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/EditTodoScreen.kt" />
              <option name="updatedContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavController&#10;import androidx.compose.material3.Text&#10;&#10;@Composable&#10;fun EditTodoScreen(navController: NavController, todoId: String?) {&#10;    Text(text = &quot;Edit Todo Screen. Todo ID: ${todoId ?: &quot;Unknown&quot;}&quot;)&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/ProfileScreen.kt" />
              <option name="originalContent" value="package com.example.todolist.pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;import com.example.todolistt.ui.theme.White&#10;&#10;@Composable&#10;fun ProfileScreen(&#10;    userName: String,&#10;    onUserNameChange: (String) -&gt; Unit,&#10;    onClearData: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.Start,&#10;        verticalArrangement = Arrangement.Top&#10;    ) {&#10;        Text(&#10;            text = &quot;Profile&quot;,&#10;            fontSize = 24.sp,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            color = DarkBlue&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        OutlinedTextField(&#10;            value = userName,&#10;            onValueChange = onUserNameChange,&#10;            label = { Text(&quot;Your Name&quot;) },&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions.Default.copy(capitalization = KeyboardCapitalization.Words),&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = onClearData,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = ButtonDefaults.buttonColors(containerColor = DarkBlue)&#10;        ) {&#10;            Text(text = &quot;Clear All Task Data&quot;, color = White)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;App version: 1.0.0&quot;,&#10;            fontSize = 14.sp,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;import com.example.todolistt.ui.theme.White&#10;&#10;@Composable&#10;fun ProfileScreen(&#10;    userName: String,&#10;    onUserNameChange: (String) -&gt; Unit,&#10;    onClearData: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.Start,&#10;        verticalArrangement = Arrangement.Top&#10;    ) {&#10;        Text(&#10;            text = &quot;Profile&quot;,&#10;            fontSize = 24.sp,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            color = DarkBlue&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        OutlinedTextField(&#10;            value = userName,&#10;            onValueChange = onUserNameChange,&#10;            label = { Text(&quot;Your Name&quot;) },&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions.Default.copy(capitalization = KeyboardCapitalization.Words),&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = onClearData,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = ButtonDefaults.buttonColors(containerColor = DarkBlue)&#10;        ) {&#10;            Text(text = &quot;Clear All Task Data&quot;, color = White)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;App version: 1.0.0&quot;,&#10;            fontSize = 14.sp,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/SignUpScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/SignUpScreen.kt" />
              <option name="originalContent" value="package com.example.todolistt.pages&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.*&#10;import androidx.navigation.NavController&#10;import com.example.todolistt.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun SignupScreen(navController: NavController, authViewModel: AuthViewModel = AuthViewModel()) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var errorMessage by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = Color.White // Pure white background here&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Create Account ✍️&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF2196F3)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = { Text(&quot;Email&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;Password&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = confirmPassword,&#10;                onValueChange = { confirmPassword = it },&#10;                label = { Text(&quot;Confirm Password&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            if (errorMessage.isNotEmpty()) {&#10;                Text(text = errorMessage, color = Color.Red)&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;            }&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (password != confirmPassword) {&#10;                        errorMessage = &quot;Passwords do not match!&quot;&#10;                    } else if (email.isBlank() || password.isBlank()) {&#10;                        errorMessage = &quot;Please fill all fields.&quot;&#10;                    } else {&#10;                        errorMessage = &quot;&quot;&#10;                        // TODO: Connect signup logic here&#10;                        navController.navigate(&quot;home&quot;) {&#10;                            popUpTo(&quot;signup&quot;) { inclusive = true }&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2196F3))&#10;            ) {&#10;                Text(text = &quot;Sign Up&quot;, color = Color.White)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;Already have an account? Log in&quot;,&#10;                color = Color.Gray,&#10;                modifier = Modifier.clickable {&#10;                    navController.navigate(&quot;login&quot;) {&#10;                        popUpTo(&quot;signup&quot;) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.*&#10;import androidx.navigation.NavController&#10;import com.example.todolistt.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun SignupScreen(navController: NavController, authViewModel: AuthViewModel = AuthViewModel()) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var errorMessage by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = Color.White // Pure white background here&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Create Account ✍️&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF2196F3)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = { Text(&quot;Email&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;Password&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            OutlinedTextField(&#10;                value = confirmPassword,&#10;                onValueChange = { confirmPassword = it },&#10;                label = { Text(&quot;Confirm Password&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            if (errorMessage.isNotEmpty()) {&#10;                Text(text = errorMessage, color = Color.Red)&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;            }&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (password != confirmPassword) {&#10;                        errorMessage = &quot;Passwords do not match!&quot;&#10;                    } else if (email.isBlank() || password.isBlank()) {&#10;                        errorMessage = &quot;Please fill all fields.&quot;&#10;                    } else {&#10;                        errorMessage = &quot;&quot;&#10;                        // TODO: Connect signup logic here&#10;                        navController.navigate(&quot;home&quot;) {&#10;                            popUpTo(&quot;signup&quot;) { inclusive = true }&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2196F3))&#10;            ) {&#10;                Text(text = &quot;Sign Up&quot;, color = Color.White)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;Already have an account? Log in&quot;,&#10;                color = Color.Gray,&#10;                modifier = Modifier.clickable {&#10;                    navController.navigate(&quot;login&quot;) {&#10;                        popUpTo(&quot;signup&quot;) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/SplashScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/SplashScreen.kt" />
              <option name="originalContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.*&#10;import androidx.navigation.NavController&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;import kotlinx.coroutines.delay&#10;&#10;val White = Color(0xFFFFFFFF)&#10;&#10;@Composable&#10;fun SplashScreen(navController: NavController) {&#10;    LaunchedEffect(Unit) {&#10;        delay(2000)&#10;        navController.navigate(&quot;welcome&quot;) {&#10;            popUpTo(&quot;splash&quot;) { inclusive = true }&#10;        }&#10;    }&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = White&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Optional: Replace with your logo&#10;            // Image(painter = painterResource(id = R.drawable.ic_logo), contentDescription = &quot;Logo&quot;)&#10;&#10;            Text(&#10;                text = &quot;TodoList&quot;,&#10;                fontSize = 40.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarkBlue&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = &quot;Stay organized, get things done ✔️&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.*&#10;import androidx.navigation.NavController&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;import com.example.todolistt.ui.theme.White&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun SplashScreen(navController: NavController) {&#10;    LaunchedEffect(Unit) {&#10;        delay(2000)&#10;        navController.navigate(&quot;welcome&quot;) {&#10;            popUpTo(&quot;splash&quot;) { inclusive = true }&#10;        }&#10;    }&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = White&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Optional: Replace with your logo&#10;            // Image(painter = painterResource(id = R.drawable.ic_logo), contentDescription = &quot;Logo&quot;)&#10;&#10;            Text(&#10;                text = &quot;TodoList&quot;,&#10;                fontSize = 40.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarkBlue&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = &quot;Stay organized, get things done ✔️&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/TodoCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/TodoCard.kt" />
              <option name="originalContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;import com.example.todolistt.ui.theme.White&#10;import com.example.todolistt.Pages.Todo // Import the correct Todo class&#10;&#10;val LightBlue = Color(0xFF64B5F6)&#10;val CardBackground = Color(0xFFF2F5FC)&#10;&#10;@Composable&#10;fun TodoCard(&#10;    todo: Todo, // Use the correct Todo class&#10;    onEdit: (Todo) -&gt; Unit = {},&#10;    onDelete: (Todo) -&gt; Unit = {},&#10;    onToggleComplete: (Todo) -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp, horizontal = 8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = CardBackground),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = todo.title,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = if (todo.isDone) Color.Gray else DarkBlue&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Progress: ${todo.progress}%&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = if (todo.isDone) Color.LightGray else Color.DarkGray&#10;                )&#10;            }&#10;&#10;            Checkbox(&#10;                checked = todo.isDone,&#10;                onCheckedChange = { onToggleComplete(todo) },&#10;                colors = CheckboxDefaults.colors(checkedColor = LightBlue)&#10;            )&#10;&#10;            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                IconButton(&#10;                    onClick = { onEdit(todo) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit&quot;,&#10;                        tint = LightBlue,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = { onDelete(todo) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = Color.Red,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;import com.example.todolistt.ui.theme.White&#10;import com.example.todolistt.ui.theme.LightBlue // Importing shared LightBlue&#10;import com.example.todolistt.Pages.Todo // Import the correct Todo class&#10;&#10;val CardBackground = Color(0xFFF2F5FC)&#10;&#10;@Composable&#10;fun TodoCard(&#10;    todo: Todo, // Use the correct Todo class&#10;    onEdit: (Todo) -&gt; Unit = {},&#10;    onDelete: (Todo) -&gt; Unit = {},&#10;    onToggleComplete: (Todo) -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp, horizontal = 8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = CardBackground),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = todo.title,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = if (todo.isDone) Color.Gray else DarkBlue&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Progress: ${todo.progress}%&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = if (todo.isDone) Color.LightGray else Color.DarkGray&#10;                )&#10;            }&#10;&#10;            Checkbox(&#10;                checked = todo.isDone,&#10;                onCheckedChange = { onToggleComplete(todo) },&#10;                colors = CheckboxDefaults.colors(checkedColor = LightBlue)&#10;            )&#10;&#10;            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                IconButton(&#10;                    onClick = { onEdit(todo) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit&quot;,&#10;                        tint = LightBlue,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = { onDelete(todo) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = Color.Red,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/WelcomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/Pages/WelcomeScreen.kt" />
              <option name="originalContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.*&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;&#10;//val DarkBlue = Color(0xFF0D47A1)&#10;//val LightBlue = Color(0xFF64B5F6)&#10;//val White = Color(0xFFFFFFFF)&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;fun WelcomeScreen(navController: NavController) {&#10;    val pagerState = rememberPagerState(pageCount = { 3 })&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    val pages = listOf(&#10;        &quot;Manage tasks efficiently and stay productive&quot;,&#10;        &quot;Stay focused with clean organization&quot;,&#10;        &quot;Start now and master your daily goals&quot;&#10;    )&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = White&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.SpaceBetween,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;&#10;            HorizontalPager(state = pagerState) { page -&gt;&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                    Text(&#10;                        text = &quot;TodoList&quot;,&#10;                        fontSize = 28.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = DarkBlue&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Text(&#10;                        text = pages[page],&#10;                        fontSize = 18.sp,&#10;                        color = Color.Gray,&#10;                        modifier = Modifier.padding(horizontal = 20.dp),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Row(horizontalArrangement = Arrangement.Center) {&#10;                repeat(3) { i -&gt;&#10;                    val isSelected = pagerState.currentPage == i&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .padding(4.dp)&#10;                            .size(if (isSelected) 12.dp else 8.dp)&#10;                            .background(&#10;                                color = if (isSelected) LightBlue else Color.LightGray,&#10;                                shape = CircleShape&#10;                            )&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (pagerState.currentPage &lt; 2) {&#10;                        coroutineScope.launch {&#10;                            pagerState.animateScrollToPage(pagerState.currentPage + 1)&#10;                        }&#10;                    } else {&#10;                        navController.navigate(&quot;login&quot;) {&#10;                            popUpTo(&quot;welcome&quot;) { inclusive = true }&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(50.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = DarkBlue)&#10;            ) {&#10;                Text(&#10;                    text = if (pagerState.currentPage &lt; 2) &quot;Next&quot; else &quot;Get Started&quot;,&#10;                    color = White&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.todolistt.Pages&#10;&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.*&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;import com.example.todolistt.ui.theme.DarkBlue&#10;import com.example.todolistt.ui.theme.LightBlue&#10;import com.example.todolistt.ui.theme.White&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;fun WelcomeScreen(navController: NavController) {&#10;    val pagerState = rememberPagerState(pageCount = { 3 })&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    val pages = listOf(&#10;        &quot;Manage tasks efficiently and stay productive&quot;,&#10;        &quot;Stay focused with clean organization&quot;,&#10;        &quot;Start now and master your daily goals&quot;&#10;    )&#10;&#10;    Surface(&#10;        modifier = Modifier.fillMaxSize(),&#10;        color = White&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.SpaceBetween,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;&#10;            HorizontalPager(state = pagerState) { page -&gt;&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                    Text(&#10;                        text = &quot;TodoList&quot;,&#10;                        fontSize = 28.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = DarkBlue&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Text(&#10;                        text = pages[page],&#10;                        fontSize = 18.sp,&#10;                        color = Color.Gray,&#10;                        modifier = Modifier.padding(horizontal = 20.dp),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Row(horizontalArrangement = Arrangement.Center) {&#10;                repeat(3) { i -&gt;&#10;                    val isSelected = pagerState.currentPage == i&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .padding(4.dp)&#10;                            .size(if (isSelected) 12.dp else 8.dp)&#10;                            .background(&#10;                                color = if (isSelected) LightBlue else Color.LightGray,&#10;                                shape = CircleShape&#10;                            )&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (pagerState.currentPage &lt; 2) {&#10;                        coroutineScope.launch {&#10;                            pagerState.animateScrollToPage(pagerState.currentPage + 1)&#10;                        }&#10;                    } else {&#10;                        navController.navigate(&quot;login&quot;) {&#10;                            popUpTo(&quot;welcome&quot;) { inclusive = true }&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(50.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = DarkBlue)&#10;            ) {&#10;                Text(&#10;                    text = if (pagerState.currentPage &lt; 2) &quot;Next&quot; else &quot;Get Started&quot;,&#10;                    color = White&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/ui/theme/Colors.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todolistt/ui/theme/Colors.kt" />
              <option name="originalContent" value="package com.example.todolistt.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;val DarkBlue = Color(0xFF0D47A1)&#10;val White = Color(0xFFFFFFFF)&#10;" />
              <option name="updatedContent" value="package com.example.todolistt.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;val DarkBlue = Color(0xFF0D47A1)&#10;val White = Color(0xFFFFFFFF)&#10;val LightBlue = Color(0xFF64B5F6)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>